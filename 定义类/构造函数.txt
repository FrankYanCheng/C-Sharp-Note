1.类外部的代码不能使用私有构造函数实例化对象，而必须使用公共构造函数。
2.其实嘛，构造函数就是结构函数和重载函数的结合体
  首先，和结构的一样是调用
  再者，也是定义了几种类型，像（），（int）,根据需要选择调用哪几种，其中用到base(加所选调用类型)
3.构造函数的主函数放在派生类中。在派生类中要先将派生类实例化，即用new+空格+派生类+（）；
4.默认情况下是按默认构造函数来读取

  System.Object.Object()
  public MyBaseClass()
  public MyDerivedClass()

  
  如果MyDerivedClass myObj = new MyDerivedClass(3);则都是调用int类型
  
  用base的话是在基类中的类型下调用base前面的构造函数
  （可是  public MyDerivedClass(int i, int j):base(12)，前面输出的却是（）基类型中的，为什么？）
   this则是先执行它后面的类型，然后在执行前面的类型 (同属于派生类中）
   如： public MyDerivedClass():this(5,7)
       public MyDerivedClass(int i, int j):base(i) 
    先调用基类中的int类型，再用派生类中的（int i,int j),之后再用派生类中的（）；
  

所以构造函数应该先看派生类再看基类，设计的时候也应该要按这种方式设计









 public class MyBaseClass
    {
        public MyBaseClass()
        {
            int A = 4;
            Console.WriteLine("A={0}", A);
        }
        public MyBaseClass(int i)
        { int AB = 5;
        Console.WriteLine("AB={0}", AB);
        }
    }
    public class MyDerivedClass : MyBaseClass
    {
        static void Main(string[] args)
        {
            MyDerivedClass myObj = new MyDerivedClass();
        }
       
        public MyDerivedClass()
        { int AC = 43;
        Console.WriteLine("AC={0}", AC);
        }
        public MyDerivedClass(int i)
        { int AD = 41;
        Console.WriteLine("AD={0}", AD);
        }
        public MyDerivedClass(int i, int j)
        {
            i = 2;
            j = 4;
            int AE = i + j;
            Console.WriteLine("AE={0}", AE);
        }
    }





